"""
Script de diagnostic et correction pour le g√©n√©rateur EBIOS RM.
Identifie les m√©thodes manquantes et propose des corrections.
"""

import inspect
from pathlib import Path
import re

def analyze_generator_methods():
    """Analyse le g√©n√©rateur pour identifier les m√©thodes manquantes."""
    
    print("üîç DIAGNOSTIC DU G√âN√âRATEUR EBIOS RM")
    print("="*50)
    
    try:
        from generate_template import EBIOSTemplateGenerator
        
        # Instancier le g√©n√©rateur
        generator = EBIOSTemplateGenerator()
        
        # Lister toutes les m√©thodes
        all_methods = [method for method in dir(generator) if method.startswith('_create')]
        
        print(f"‚úÖ G√©n√©rateur import√© avec succ√®s")
        print(f"üìä M√©thodes _create disponibles : {len(all_methods)}")
        
        for method in all_methods:
            print(f"   ‚Ä¢ {method}")
        
        # V√©rifier les m√©thodes appel√©es dans generate_template
        print("\nüîç Analyse du code source...")
        
        generator_file = Path("c:/Users/mushm/Documents/AR/scripts/generate_template.py")
        if generator_file.exists():
            content = generator_file.read_text(encoding='utf-8')
            
            # Rechercher les appels de m√©thodes _create
            create_calls = re.findall(r'self\.(_create_\w+)\(', content)
            unique_calls = list(set(create_calls))
            
            print(f"üìã M√©thodes appel√©es dans generate_template : {len(unique_calls)}")
            
            missing_methods = []
            for called_method in unique_calls:
                if not hasattr(generator, called_method):
                    missing_methods.append(called_method)
                    print(f"   ‚ùå {called_method} - MANQUANTE")
                else:
                    print(f"   ‚úÖ {called_method}")
            
            if missing_methods:
                print(f"\nüö® {len(missing_methods)} m√©thode(s) manquante(s) d√©tect√©e(s)")
                print("üí° Cr√©ation des m√©thodes manquantes...")
                
                create_missing_methods(missing_methods, generator_file)
            else:
                print("\n‚úÖ Toutes les m√©thodes requises sont pr√©sentes")
        
        else:
            print("‚ùå Fichier generate_template.py non trouv√©")
    
    except Exception as e:
        print(f"‚ùå Erreur lors de l'analyse : {e}")


def create_missing_methods(missing_methods, generator_file):
    """Cr√©e les m√©thodes manquantes dans le g√©n√©rateur."""
    
    method_templates = {
        '_create_config_sheet': '''
    def _create_config_sheet(self, pme_profile: bool = False) -> None:
        """Cr√©e l'onglet de configuration EBIOS RM."""
        ws = self.wb.create_sheet("Config_EBIOS", 0)  # Premi√®re position
        
        # Titre principal
        ws["A1"] = "üîß CONFIGURATION EBIOS RISK MANAGER"
        ws["A1"].font = Font(size=14, bold=True, color="FFFFFF")
        ws["A1"].fill = PatternFill(start_color="2C3E50", end_color="2C3E50", fill_type="solid")
        ws.merge_cells("A1:F1")
        
        # Description
        ws["A2"] = "Configuration des param√®tres EBIOS RM selon profil organisationnel"
        ws["A2"].font = Font(italic=True)
        
        # Section profil
        ws["A4"] = "üìã PROFIL ORGANISATIONNEL"
        ws["A4"].font = Font(size=12, bold=True)
        
        profile_text = "PME/TPE - Configuration simplifi√©e" if pme_profile else "Grande entreprise - Configuration compl√®te"
        ws["A5"] = f"Type d'organisation : {profile_text}"
        
        # Instructions
        ws["A7"] = "üìù INSTRUCTIONS D'UTILISATION"
        ws["A7"].font = Font(size=12, bold=True)
        
        instructions = [
            "1. Renseignez les actifs dans l'Atelier 1",
            "2. Analysez les sources de risque dans l'Atelier 2", 
            "3. D√©finissez les sc√©narios dans l'Atelier 3",
            "4. √âvaluez les mesures dans l'Atelier 4",
            "5. Consultez la synth√®se pour les r√©sultats"
        ]
        
        for i, instruction in enumerate(instructions, 8):
            ws.cell(row=i, column=1, value=instruction)
        
        logger.info("‚úÖ Onglet de configuration cr√©√©")
''',
        
        '_create_synthese': '''
    def _create_synthese(self) -> None:
        """Cr√©e l'onglet Synth√®se avec indicateurs cl√©s."""
        ws = self.wb.create_sheet("Synthese")
        
        # Titre
        ws["A1"] = "üìä SYNTH√àSE EX√âCUTIVE - ANALYSE DES RISQUES"
        ws["A1"].font = Font(size=14, bold=True, color="FFFFFF")
        ws["A1"].fill = PatternFill(start_color="34495E", end_color="34495E", fill_type="solid")
        ws.merge_cells("A1:F1")
        
        # M√©triques principales
        ws["A3"] = "üéØ INDICATEURS CL√âS"
        ws["A3"].font = Font(size=12, bold=True)
        
        # En-t√™tes
        headers = ["Indicateur", "Valeur", "Statut", "Tendance"]
        for col, header in enumerate(headers, 1):
            cell = ws.cell(row=4, column=col, value=header)
            cell.font = Font(bold=True)
            cell.fill = self.gray_fill
        
        # Donn√©es de synth√®se
        metrics = [
            ["Nombre d'actifs analys√©s", "=COUNTA(Atelier1_Socle.A:A)-1", "En cours", "‚ÜóÔ∏è"],
            ["Sources de risque identifi√©es", "=COUNTA(Atelier2_Sources.A:A)-1", "Compl√©t√©", "‚Üí"],
            ["Sc√©narios √©valu√©s", "=COUNTA(Atelier3_Scenarios.A:A)-1", "En cours", "‚ÜóÔ∏è"],
            ["Mesures planifi√©es", "=COUNTA(Atelier4_Operationnels.A:A)-1", "Planifi√©", "‚ÜóÔ∏è"]
        ]
        
        for row_idx, metric_data in enumerate(metrics, 5):
            for col_idx, value in enumerate(metric_data, 1):
                ws.cell(row=row_idx, column=col_idx, value=value)
        
        logger.info("‚úÖ Onglet de synth√®se cr√©√©")
'''
    }
    
    print("üîß G√©n√©ration des m√©thodes manquantes...")
    
    # Lire le contenu actuel
    content = generator_file.read_text(encoding='utf-8')
    
    # Ajouter les m√©thodes manquantes avant la m√©thode main()
    main_pattern = r'(\ndef main\(\):)'
    
    methods_to_add = ""
    for method_name in missing_methods:
        if method_name in method_templates:
            methods_to_add += method_templates[method_name] + "\n"
            print(f"   ‚úÖ {method_name} ajout√©e")
        else:
            # Cr√©er une m√©thode basique
            basic_method = f'''
    def {method_name}(self) -> None:
        """M√©thode g√©n√©r√©e automatiquement - √Ä impl√©menter."""
        logger.warning(f"M√©thode {method_name} appel√©e mais pas encore impl√©ment√©e")
        pass
'''
            methods_to_add += basic_method + "\n"
            print(f"   ‚ö†Ô∏è  {method_name} cr√©√©e (template basique)")
    
    # Ins√©rer les nouvelles m√©thodes
    new_content = re.sub(main_pattern, methods_to_add + r'\1', content)
    
    # Sauvegarder le fichier corrig√©
    backup_file = generator_file.with_suffix('.py.backup')
    generator_file.rename(backup_file)
    print(f"üíæ Sauvegarde cr√©√©e : {backup_file}")
    
    generator_file.write_text(new_content, encoding='utf-8')
    print(f"‚úÖ Fichier corrig√© : {generator_file}")
    
    print("\nüéØ Correction termin√©e ! Vous pouvez maintenant ex√©cuter :")
    print("   python generate_template.py")


if __name__ == "__main__":
    analyze_generator_methods()
